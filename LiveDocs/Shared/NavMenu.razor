@inject IHttpClientFactory _clientFacotry;
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject IJSRuntime _js
@inject IAccessTokenProvider _tokenProvider
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">LiveDocs</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @if (files != null)
        {
            foreach (var menu in files)
            {
        <li class="nav-item px-3">

            <NavLink class="nav-link" href="@menu.Name" Match="NavLinkMatch.All">

            <span class="oi oi-home" aria-hidden="true"></span> @menu.Name
        </NavLink>
        </li>

            }
        }
    </ul>
    <a href="./swagger" target="_blank">
        <span class="oi oi-home" aria-hidden="true"></span> Livedocs API Swagger
    </a>
    <button type="button" class="btn btn-primary" @onclick="CopyTokenToClipboard" title="Copy bearer token to clipboard for Swagger auth"><i class="fas fa-key"></i> Copy token</button>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    public List<GetResourceDocumentationsFile> files = new();

    private IJSObjectReference _clipBoardInterface;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("NavMenu OnInitializedAsync");
        
        _authenticationStateProvider.AuthenticationStateChanged += async state =>
        {
            var authState = await state;
            var isAuthenticated = authState.User.Identity.IsAuthenticated;
            Console.WriteLine($"authState changed: isAuthenticated:{isAuthenticated} fetching available resource documentations...");

            if (isAuthenticated)
            {
                var httpClient = _clientFacotry.CreateClient("LiveDocs.ServerAPI");
                var menuList = await httpClient.GetFromJsonAsync<GetResourceDocumentationsResponse>("api/v1/resources");

                if (menuList is not null)
                {
                    files = menuList.Files;
                    StateHasChanged();
                }
            }
        };        
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _clipBoardInterface = await _js.InvokeAsync<IJSObjectReference>("import", "./clipboard-interface.js");
        }
    }

    private async Task CopyTokenToClipboard()
    {
        var result = await _tokenProvider.RequestAccessToken();
        if (result.TryGetToken(out var token)) {
            await _clipBoardInterface.InvokeVoidAsync("copyText", $"bearer {token.Value}");
        }
    }

    public class GetResourceDocumentationsFile
    {
        public string Name { get; set; }
        public string MdPath { get; set; }
        public string JsonPath { get; set; }
    }

    public class GetResourceDocumentationsResponse
    {
        public List<GetResourceDocumentationsFile> Files { get; init; } = new();
    }

}
