@page "/{page}"
@inherits FragmentNavigationBase
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@inject IAccessTokenProvider _tokenProvider

<p>LiveDocs @Page Resource Documentation, last rendered @_lastRendered</p>

<StardustDL.RazorComponents.Markdown.MarkdownRenderer Value="@MarkdownText"
                                                      Class="markdown-body" />

@code {
    private HubConnection _hubConnection;
    public string MarkdownText = "#### waiting for markdown and data to be rendered...";
    private DateTime _lastRendered = DateTime.Now;

    [Parameter]
    public string Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"OnInitializedAsync Index.razor");

        await base.OnInitializedAsync();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/latestmarkdownhub"), 
            async options =>  {
                options.AccessTokenProvider = async () => {
                      var result = await _tokenProvider.RequestAccessToken();
                      if (result.TryGetToken(out var token)) {
                          Console.WriteLine($"fetched token successfully for hub connection {token.Value}");
                          return token.Value;
                      }
                      Console.WriteLine($"failed to fetch token");
                      return string.Empty;
                };                
            })
            .Build();
                        

        _hubConnection.On<string>("SendLatestMarkdownToInterestedClients", async (newMarkdown) =>
        {
            Console.WriteLine("New markdown received");

            // remember scroll state before updating markdown
            var scrollState = await ScrollInterface.InvokeAsync<System.Drawing.Point>("getScroll");
            Console.WriteLine(scrollState);

            // update markdown
            MarkdownText = newMarkdown;
            _lastRendered = DateTime.Now;
            StateHasChanged();

            // set scroll state to same as before updating markdown
            await ScrollInterface.InvokeVoidAsync("setScroll", scrollState.X, scrollState.Y);
        });

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("SelectResource", Page);
        Console.WriteLine($"SelectResource called for {Page}");
    }

    protected override async Task OnParametersSetAsync()
    {
        await _hubConnection.SendAsync("SelectResource", Page);
        Console.WriteLine($"SelectResource called for {Page}");

        await base.OnParametersSetAsync();
    }
}


